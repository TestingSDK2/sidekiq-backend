// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protobuf/v1/notification.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	MarkNotificationAsRead(ctx context.Context, in *MarkNotificationAsReadRequest, opts ...grpc.CallOption) (*GenericReply, error)
	MarkAllNotificationAsRead(ctx context.Context, in *MarkAllNotificationAsReadRequest, opts ...grpc.CallOption) (*GenericReply, error)
	GetNotificationList(ctx context.Context, in *GetNotificationListRequest, opts ...grpc.CallOption) (*GenericReply, error)
	GetNotificationDisplayCount(ctx context.Context, in *GetNotificationDisplayCountRequest, opts ...grpc.CallOption) (*GetNotificationDisplayCountReply, error)
	NotificationHandler(ctx context.Context, in *NotificationHandlerRequest, opts ...grpc.CallOption) (*GenericReply, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) MarkNotificationAsRead(ctx context.Context, in *MarkNotificationAsReadRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := c.cc.Invoke(ctx, "/notification.v1.NotificationService/MarkNotificationAsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) MarkAllNotificationAsRead(ctx context.Context, in *MarkAllNotificationAsReadRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := c.cc.Invoke(ctx, "/notification.v1.NotificationService/MarkAllNotificationAsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationList(ctx context.Context, in *GetNotificationListRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := c.cc.Invoke(ctx, "/notification.v1.NotificationService/GetNotificationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationDisplayCount(ctx context.Context, in *GetNotificationDisplayCountRequest, opts ...grpc.CallOption) (*GetNotificationDisplayCountReply, error) {
	out := new(GetNotificationDisplayCountReply)
	err := c.cc.Invoke(ctx, "/notification.v1.NotificationService/GetNotificationDisplayCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) NotificationHandler(ctx context.Context, in *NotificationHandlerRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := c.cc.Invoke(ctx, "/notification.v1.NotificationService/NotificationHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	MarkNotificationAsRead(context.Context, *MarkNotificationAsReadRequest) (*GenericReply, error)
	MarkAllNotificationAsRead(context.Context, *MarkAllNotificationAsReadRequest) (*GenericReply, error)
	GetNotificationList(context.Context, *GetNotificationListRequest) (*GenericReply, error)
	GetNotificationDisplayCount(context.Context, *GetNotificationDisplayCountRequest) (*GetNotificationDisplayCountReply, error)
	NotificationHandler(context.Context, *NotificationHandlerRequest) (*GenericReply, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) MarkNotificationAsRead(context.Context, *MarkNotificationAsReadRequest) (*GenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotificationAsRead not implemented")
}
func (UnimplementedNotificationServiceServer) MarkAllNotificationAsRead(context.Context, *MarkAllNotificationAsReadRequest) (*GenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAllNotificationAsRead not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationList(context.Context, *GetNotificationListRequest) (*GenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationList not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationDisplayCount(context.Context, *GetNotificationDisplayCountRequest) (*GetNotificationDisplayCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationDisplayCount not implemented")
}
func (UnimplementedNotificationServiceServer) NotificationHandler(context.Context, *NotificationHandlerRequest) (*GenericReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotificationHandler not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_MarkNotificationAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkNotificationAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).MarkNotificationAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.v1.NotificationService/MarkNotificationAsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).MarkNotificationAsRead(ctx, req.(*MarkNotificationAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_MarkAllNotificationAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAllNotificationAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).MarkAllNotificationAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.v1.NotificationService/MarkAllNotificationAsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).MarkAllNotificationAsRead(ctx, req.(*MarkAllNotificationAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.v1.NotificationService/GetNotificationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationList(ctx, req.(*GetNotificationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationDisplayCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationDisplayCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationDisplayCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.v1.NotificationService/GetNotificationDisplayCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationDisplayCount(ctx, req.(*GetNotificationDisplayCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_NotificationHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).NotificationHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.v1.NotificationService/NotificationHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).NotificationHandler(ctx, req.(*NotificationHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.v1.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarkNotificationAsRead",
			Handler:    _NotificationService_MarkNotificationAsRead_Handler,
		},
		{
			MethodName: "MarkAllNotificationAsRead",
			Handler:    _NotificationService_MarkAllNotificationAsRead_Handler,
		},
		{
			MethodName: "GetNotificationList",
			Handler:    _NotificationService_GetNotificationList_Handler,
		},
		{
			MethodName: "GetNotificationDisplayCount",
			Handler:    _NotificationService_GetNotificationDisplayCount_Handler,
		},
		{
			MethodName: "NotificationHandler",
			Handler:    _NotificationService_NotificationHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/v1/notification.proto",
}
