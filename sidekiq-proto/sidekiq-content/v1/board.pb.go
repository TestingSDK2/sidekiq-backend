// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: protobuf/board.proto

package v1

import (
	any1 "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HandleBoardInvitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardID string `protobuf:"bytes,1,opt,name=boardID,proto3" json:"boardID,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *HandleBoardInvitation) Reset() {
	*x = HandleBoardInvitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleBoardInvitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleBoardInvitation) ProtoMessage() {}

func (x *HandleBoardInvitation) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleBoardInvitation.ProtoReflect.Descriptor instead.
func (*HandleBoardInvitation) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{0}
}

func (x *HandleBoardInvitation) GetBoardID() string {
	if x != nil {
		return x.BoardID
	}
	return ""
}

func (x *HandleBoardInvitation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ConciseProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserID             int32       `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	FirstName          string      `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName           string      `protobuf:"bytes,4,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Photo              string      `protobuf:"bytes,5,opt,name=photo,proto3" json:"photo,omitempty"`
	ScreenName         string      `protobuf:"bytes,6,opt,name=screenName,proto3" json:"screenName,omitempty"`
	UserName           string      `protobuf:"bytes,7,opt,name=userName,proto3" json:"userName,omitempty"`
	Email              string      `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	Phone              string      `protobuf:"bytes,9,opt,name=phone,proto3" json:"phone,omitempty"`
	Type               string      `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	Shareable          bool        `protobuf:"varint,11,opt,name=shareable,proto3" json:"shareable,omitempty"`
	DefaultThingsBoard string      `protobuf:"bytes,12,opt,name=defaultThingsBoard,proto3" json:"defaultThingsBoard,omitempty"`
	Thumbs             *Thumbnails `protobuf:"bytes,13,opt,name=thumbs,proto3" json:"thumbs,omitempty"`
}

func (x *ConciseProfile) Reset() {
	*x = ConciseProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConciseProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConciseProfile) ProtoMessage() {}

func (x *ConciseProfile) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConciseProfile.ProtoReflect.Descriptor instead.
func (*ConciseProfile) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{1}
}

func (x *ConciseProfile) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConciseProfile) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ConciseProfile) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ConciseProfile) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ConciseProfile) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *ConciseProfile) GetScreenName() string {
	if x != nil {
		return x.ScreenName
	}
	return ""
}

func (x *ConciseProfile) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ConciseProfile) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ConciseProfile) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ConciseProfile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConciseProfile) GetShareable() bool {
	if x != nil {
		return x.Shareable
	}
	return false
}

func (x *ConciseProfile) GetDefaultThingsBoard() string {
	if x != nil {
		return x.DefaultThingsBoard
	}
	return ""
}

func (x *ConciseProfile) GetThumbs() *Thumbnails {
	if x != nil {
		return x.Thumbs
	}
	return nil
}

type Thumbnails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Small    string `protobuf:"bytes,1,opt,name=small,proto3" json:"small,omitempty"`
	Medium   string `protobuf:"bytes,2,opt,name=medium,proto3" json:"medium,omitempty"`
	Large    string `protobuf:"bytes,3,opt,name=large,proto3" json:"large,omitempty"`
	Icon     string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Original string `protobuf:"bytes,5,opt,name=original,proto3" json:"original,omitempty"`
}

func (x *Thumbnails) Reset() {
	*x = Thumbnails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thumbnails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thumbnails) ProtoMessage() {}

func (x *Thumbnails) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thumbnails.ProtoReflect.Descriptor instead.
func (*Thumbnails) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{2}
}

func (x *Thumbnails) GetSmall() string {
	if x != nil {
		return x.Small
	}
	return ""
}

func (x *Thumbnails) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *Thumbnails) GetLarge() string {
	if x != nil {
		return x.Large
	}
	return ""
}

func (x *Thumbnails) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Thumbnails) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId              string               `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	ProfileID        int32                `protobuf:"varint,2,opt,name=profileID,proto3" json:"profileID,omitempty"`
	Message          string               `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	CreateDate       *timestamp.Timestamp `protobuf:"bytes,4,opt,name=createDate,proto3" json:"createDate,omitempty"`
	LastModifiedDate *timestamp.Timestamp `protobuf:"bytes,5,opt,name=lastModifiedDate,proto3" json:"lastModifiedDate,omitempty"`
	AddedTime        string               `protobuf:"bytes,6,opt,name=addedTime,proto3" json:"addedTime,omitempty"`
	EditTime         string               `protobuf:"bytes,7,opt,name=editTime,proto3" json:"editTime,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{3}
}

func (x *Comment) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *Comment) GetProfileID() int32 {
	if x != nil {
		return x.ProfileID
	}
	return 0
}

func (x *Comment) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Comment) GetCreateDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *Comment) GetLastModifiedDate() *timestamp.Timestamp {
	if x != nil {
		return x.LastModifiedDate
	}
	return nil
}

func (x *Comment) GetAddedTime() string {
	if x != nil {
		return x.AddedTime
	}
	return ""
}

func (x *Comment) GetEditTime() string {
	if x != nil {
		return x.EditTime
	}
	return ""
}

type Board struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Basic fields
	XId              string               `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Owner            string               `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	State            string               `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Visible          string               `protobuf:"bytes,4,opt,name=visible,proto3" json:"visible,omitempty"`
	Shareable        bool                 `protobuf:"varint,5,opt,name=shareable,proto3" json:"shareable,omitempty"`
	Searchable       string               `protobuf:"bytes,6,opt,name=searchable,proto3" json:"searchable,omitempty"`
	Bookmark         bool                 `protobuf:"varint,7,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	BookmarkID       string               `protobuf:"bytes,8,opt,name=bookmarkID,proto3" json:"bookmarkID,omitempty"`
	IsBookmarked     bool                 `protobuf:"varint,9,opt,name=isBookmarked,proto3" json:"isBookmarked,omitempty"`
	Reactions        bool                 `protobuf:"varint,10,opt,name=reactions,proto3" json:"reactions,omitempty"`
	ViewCount        int32                `protobuf:"varint,11,opt,name=viewCount,proto3" json:"viewCount,omitempty"`
	OwnerInfo        *ConciseProfile      `protobuf:"bytes,12,opt,name=ownerInfo,proto3" json:"ownerInfo,omitempty"`
	TaggedPeople     []*ConciseProfile    `protobuf:"bytes,13,rep,name=taggedPeople,proto3" json:"taggedPeople,omitempty"`
	PostScheduleDate string               `protobuf:"bytes,14,opt,name=postScheduleDate,proto3" json:"postScheduleDate,omitempty"`
	PostScheduleTime string               `protobuf:"bytes,15,opt,name=postScheduleTime,proto3" json:"postScheduleTime,omitempty"`
	ParentID         string               `protobuf:"bytes,16,opt,name=parentID,proto3" json:"parentID,omitempty"`
	CoverImage       string               `protobuf:"bytes,17,opt,name=coverImage,proto3" json:"coverImage,omitempty"`
	Password         string               `protobuf:"bytes,18,opt,name=password,proto3" json:"password,omitempty"`
	Chat             bool                 `protobuf:"varint,19,opt,name=chat,proto3" json:"chat,omitempty"`
	IsComments       bool                 `protobuf:"varint,20,opt,name=isComments,proto3" json:"isComments,omitempty"`
	Title            string               `protobuf:"bytes,21,opt,name=title,proto3" json:"title,omitempty"`
	Type             string               `protobuf:"bytes,22,opt,name=type,proto3" json:"type,omitempty"`
	Description      string               `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`
	Tags             []string             `protobuf:"bytes,24,rep,name=tags,proto3" json:"tags,omitempty"`
	AllThingsTags    []string             `protobuf:"bytes,25,rep,name=allThingsTags,proto3" json:"allThingsTags,omitempty"`
	Admins           []string             `protobuf:"bytes,26,rep,name=admins,proto3" json:"admins,omitempty"`
	Authors          []string             `protobuf:"bytes,27,rep,name=authors,proto3" json:"authors,omitempty"`
	Viewers          []string             `protobuf:"bytes,28,rep,name=viewers,proto3" json:"viewers,omitempty"`
	Subscribers      []string             `protobuf:"bytes,29,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
	Followers        []string             `protobuf:"bytes,30,rep,name=followers,proto3" json:"followers,omitempty"`
	Guests           []string             `protobuf:"bytes,31,rep,name=guests,proto3" json:"guests,omitempty"`
	Blocked          []string             `protobuf:"bytes,32,rep,name=blocked,proto3" json:"blocked,omitempty"`
	Sequence         int32                `protobuf:"varint,33,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Comments         []*Comment           `protobuf:"bytes,34,rep,name=comments,proto3" json:"comments,omitempty"`
	CreateDate       *timestamp.Timestamp `protobuf:"bytes,35,opt,name=createDate,proto3" json:"createDate,omitempty"`
	ModifiedDate     *timestamp.Timestamp `protobuf:"bytes,36,opt,name=modifiedDate,proto3" json:"modifiedDate,omitempty"`
	DeleteDate       *timestamp.Timestamp `protobuf:"bytes,37,opt,name=deleteDate,proto3" json:"deleteDate,omitempty"`
	ExpiryDate       *timestamp.Timestamp `protobuf:"bytes,38,opt,name=expiryDate,proto3" json:"expiryDate,omitempty"`
	PublicStartDate  string               `protobuf:"bytes,39,opt,name=publicStartDate,proto3" json:"publicStartDate,omitempty"`
	PublicEndDate    string               `protobuf:"bytes,40,opt,name=publicEndDate,proto3" json:"publicEndDate,omitempty"`
	SortDate         string               `protobuf:"bytes,41,opt,name=sortDate,proto3" json:"sortDate,omitempty"`
	IsPassword       bool                 `protobuf:"varint,42,opt,name=isPassword,proto3" json:"isPassword,omitempty"`
	Location         string               `protobuf:"bytes,43,opt,name=location,proto3" json:"location,omitempty"`
	BoardFollowers   []*ConciseProfile    `protobuf:"bytes,44,rep,name=boardFollowers,proto3" json:"boardFollowers,omitempty"`
	BoardMembers     []*ConciseProfile    `protobuf:"bytes,45,rep,name=boardMembers,proto3" json:"boardMembers,omitempty"`
	TotalFollowers   int32                `protobuf:"varint,46,opt,name=totalFollowers,proto3" json:"totalFollowers,omitempty"`
	TotalTags        int32                `protobuf:"varint,47,opt,name=totalTags,proto3" json:"totalTags,omitempty"`
	TotalMembers     int32                `protobuf:"varint,48,opt,name=totalMembers,proto3" json:"totalMembers,omitempty"`
	IsDefaultBoard   bool                 `protobuf:"varint,49,opt,name=isDefaultBoard,proto3" json:"isDefaultBoard,omitempty"`
	IsBoardFollower  bool                 `protobuf:"varint,50,opt,name=isBoardFollower,proto3" json:"isBoardFollower,omitempty"`
	Hidden           bool                 `protobuf:"varint,51,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Role             string               `protobuf:"bytes,52,opt,name=role,proto3" json:"role,omitempty"`
	Likes            []string             `protobuf:"bytes,53,rep,name=likes,proto3" json:"likes,omitempty"`
	// Deprecated: Do not use.
	TotalComments int32 `protobuf:"varint,54,opt,name=totalComments,proto3" json:"totalComments,omitempty"`
	// Deprecated: Do not use.
	TotalLikes int32 `protobuf:"varint,55,opt,name=totalLikes,proto3" json:"totalLikes,omitempty"`
	IsLiked    bool  `protobuf:"varint,56,opt,name=isLiked,proto3" json:"isLiked,omitempty"`
	IsHidden   bool  `protobuf:"varint,57,opt,name=isHidden,proto3" json:"isHidden,omitempty"`
	// Deprecated: Do not use.
	IsBoardShared bool        `protobuf:"varint,58,opt,name=isBoardShared,proto3" json:"isBoardShared,omitempty"`
	Thumbs        *Thumbnails `protobuf:"bytes,59,opt,name=thumbs,proto3" json:"thumbs,omitempty"`
}

func (x *Board) Reset() {
	*x = Board{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Board) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board) ProtoMessage() {}

func (x *Board) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board.ProtoReflect.Descriptor instead.
func (*Board) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{4}
}

func (x *Board) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *Board) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Board) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Board) GetVisible() string {
	if x != nil {
		return x.Visible
	}
	return ""
}

func (x *Board) GetShareable() bool {
	if x != nil {
		return x.Shareable
	}
	return false
}

func (x *Board) GetSearchable() string {
	if x != nil {
		return x.Searchable
	}
	return ""
}

func (x *Board) GetBookmark() bool {
	if x != nil {
		return x.Bookmark
	}
	return false
}

func (x *Board) GetBookmarkID() string {
	if x != nil {
		return x.BookmarkID
	}
	return ""
}

func (x *Board) GetIsBookmarked() bool {
	if x != nil {
		return x.IsBookmarked
	}
	return false
}

func (x *Board) GetReactions() bool {
	if x != nil {
		return x.Reactions
	}
	return false
}

func (x *Board) GetViewCount() int32 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *Board) GetOwnerInfo() *ConciseProfile {
	if x != nil {
		return x.OwnerInfo
	}
	return nil
}

func (x *Board) GetTaggedPeople() []*ConciseProfile {
	if x != nil {
		return x.TaggedPeople
	}
	return nil
}

func (x *Board) GetPostScheduleDate() string {
	if x != nil {
		return x.PostScheduleDate
	}
	return ""
}

func (x *Board) GetPostScheduleTime() string {
	if x != nil {
		return x.PostScheduleTime
	}
	return ""
}

func (x *Board) GetParentID() string {
	if x != nil {
		return x.ParentID
	}
	return ""
}

func (x *Board) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *Board) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Board) GetChat() bool {
	if x != nil {
		return x.Chat
	}
	return false
}

func (x *Board) GetIsComments() bool {
	if x != nil {
		return x.IsComments
	}
	return false
}

func (x *Board) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Board) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Board) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Board) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Board) GetAllThingsTags() []string {
	if x != nil {
		return x.AllThingsTags
	}
	return nil
}

func (x *Board) GetAdmins() []string {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *Board) GetAuthors() []string {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *Board) GetViewers() []string {
	if x != nil {
		return x.Viewers
	}
	return nil
}

func (x *Board) GetSubscribers() []string {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

func (x *Board) GetFollowers() []string {
	if x != nil {
		return x.Followers
	}
	return nil
}

func (x *Board) GetGuests() []string {
	if x != nil {
		return x.Guests
	}
	return nil
}

func (x *Board) GetBlocked() []string {
	if x != nil {
		return x.Blocked
	}
	return nil
}

func (x *Board) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Board) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Board) GetCreateDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *Board) GetModifiedDate() *timestamp.Timestamp {
	if x != nil {
		return x.ModifiedDate
	}
	return nil
}

func (x *Board) GetDeleteDate() *timestamp.Timestamp {
	if x != nil {
		return x.DeleteDate
	}
	return nil
}

func (x *Board) GetExpiryDate() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *Board) GetPublicStartDate() string {
	if x != nil {
		return x.PublicStartDate
	}
	return ""
}

func (x *Board) GetPublicEndDate() string {
	if x != nil {
		return x.PublicEndDate
	}
	return ""
}

func (x *Board) GetSortDate() string {
	if x != nil {
		return x.SortDate
	}
	return ""
}

func (x *Board) GetIsPassword() bool {
	if x != nil {
		return x.IsPassword
	}
	return false
}

func (x *Board) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Board) GetBoardFollowers() []*ConciseProfile {
	if x != nil {
		return x.BoardFollowers
	}
	return nil
}

func (x *Board) GetBoardMembers() []*ConciseProfile {
	if x != nil {
		return x.BoardMembers
	}
	return nil
}

func (x *Board) GetTotalFollowers() int32 {
	if x != nil {
		return x.TotalFollowers
	}
	return 0
}

func (x *Board) GetTotalTags() int32 {
	if x != nil {
		return x.TotalTags
	}
	return 0
}

func (x *Board) GetTotalMembers() int32 {
	if x != nil {
		return x.TotalMembers
	}
	return 0
}

func (x *Board) GetIsDefaultBoard() bool {
	if x != nil {
		return x.IsDefaultBoard
	}
	return false
}

func (x *Board) GetIsBoardFollower() bool {
	if x != nil {
		return x.IsBoardFollower
	}
	return false
}

func (x *Board) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Board) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Board) GetLikes() []string {
	if x != nil {
		return x.Likes
	}
	return nil
}

// Deprecated: Do not use.
func (x *Board) GetTotalComments() int32 {
	if x != nil {
		return x.TotalComments
	}
	return 0
}

// Deprecated: Do not use.
func (x *Board) GetTotalLikes() int32 {
	if x != nil {
		return x.TotalLikes
	}
	return 0
}

func (x *Board) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *Board) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

// Deprecated: Do not use.
func (x *Board) GetIsBoardShared() bool {
	if x != nil {
		return x.IsBoardShared
	}
	return false
}

func (x *Board) GetThumbs() *Thumbnails {
	if x != nil {
		return x.Thumbs
	}
	return nil
}

type BoardMemberRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileID string `protobuf:"bytes,1,opt,name=profileID,proto3" json:"profileID,omitempty"`
	Role      string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *BoardMemberRoleRequest) Reset() {
	*x = BoardMemberRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardMemberRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardMemberRoleRequest) ProtoMessage() {}

func (x *BoardMemberRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardMemberRoleRequest.ProtoReflect.Descriptor instead.
func (*BoardMemberRoleRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{5}
}

func (x *BoardMemberRoleRequest) GetProfileID() string {
	if x != nil {
		return x.ProfileID
	}
	return ""
}

func (x *BoardMemberRoleRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type ChangeProfileRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileID string `protobuf:"bytes,1,opt,name=profileID,proto3" json:"profileID,omitempty"`
	OldRole   string `protobuf:"bytes,2,opt,name=oldRole,proto3" json:"oldRole,omitempty"`
	NewRole   string `protobuf:"bytes,3,opt,name=newRole,proto3" json:"newRole,omitempty"`
}

func (x *ChangeProfileRole) Reset() {
	*x = ChangeProfileRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeProfileRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeProfileRole) ProtoMessage() {}

func (x *ChangeProfileRole) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeProfileRole.ProtoReflect.Descriptor instead.
func (*ChangeProfileRole) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{6}
}

func (x *ChangeProfileRole) GetProfileID() string {
	if x != nil {
		return x.ProfileID
	}
	return ""
}

func (x *ChangeProfileRole) GetOldRole() string {
	if x != nil {
		return x.OldRole
	}
	return ""
}

func (x *ChangeProfileRole) GetNewRole() string {
	if x != nil {
		return x.NewRole
	}
	return ""
}

type BoardMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardId  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=boardId,proto3" json:"boardId,omitempty"`
	ParentId *timestamp.Timestamp `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
}

func (x *BoardMapping) Reset() {
	*x = BoardMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardMapping) ProtoMessage() {}

func (x *BoardMapping) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardMapping.ProtoReflect.Descriptor instead.
func (*BoardMapping) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{7}
}

func (x *BoardMapping) GetBoardId() *timestamp.Timestamp {
	if x != nil {
		return x.BoardId
	}
	return nil
}

func (x *BoardMapping) GetParentId() *timestamp.Timestamp {
	if x != nil {
		return x.ParentId
	}
	return nil
}

type BoardFollowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardTitle string `protobuf:"bytes,1,opt,name=boardTitle,proto3" json:"boardTitle,omitempty"`
	BoardID    string `protobuf:"bytes,2,opt,name=boardID,proto3" json:"boardID,omitempty"`
	OwnerID    int32  `protobuf:"varint,3,opt,name=ownerID,proto3" json:"ownerID,omitempty"`
	CreateDate string `protobuf:"bytes,4,opt,name=createDate,proto3" json:"createDate,omitempty"`
	ProfileID  int32  `protobuf:"varint,5,opt,name=profileID,proto3" json:"profileID,omitempty"`
}

func (x *BoardFollowInfo) Reset() {
	*x = BoardFollowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardFollowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardFollowInfo) ProtoMessage() {}

func (x *BoardFollowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardFollowInfo.ProtoReflect.Descriptor instead.
func (*BoardFollowInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{8}
}

func (x *BoardFollowInfo) GetBoardTitle() string {
	if x != nil {
		return x.BoardTitle
	}
	return ""
}

func (x *BoardFollowInfo) GetBoardID() string {
	if x != nil {
		return x.BoardID
	}
	return ""
}

func (x *BoardFollowInfo) GetOwnerID() int32 {
	if x != nil {
		return x.OwnerID
	}
	return 0
}

func (x *BoardFollowInfo) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *BoardFollowInfo) GetProfileID() int32 {
	if x != nil {
		return x.ProfileID
	}
	return 0
}

type FetchBoardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileID      int32  `protobuf:"varint,1,opt,name=profileID,proto3" json:"profileID,omitempty"`
	FetchSubBoards bool   `protobuf:"varint,2,opt,name=fetchSubBoards,proto3" json:"fetchSubBoards,omitempty"`
	Page           string `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit          string `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *FetchBoardsRequest) Reset() {
	*x = FetchBoardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBoardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBoardsRequest) ProtoMessage() {}

func (x *FetchBoardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBoardsRequest.ProtoReflect.Descriptor instead.
func (*FetchBoardsRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{9}
}

func (x *FetchBoardsRequest) GetProfileID() int32 {
	if x != nil {
		return x.ProfileID
	}
	return 0
}

func (x *FetchBoardsRequest) GetFetchSubBoards() bool {
	if x != nil {
		return x.FetchSubBoards
	}
	return false
}

func (x *FetchBoardsRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *FetchBoardsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

type SearchBoardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileID      int32  `protobuf:"varint,1,opt,name=profileID,proto3" json:"profileID,omitempty"`
	BoardName      string `protobuf:"bytes,2,opt,name=boardName,proto3" json:"boardName,omitempty"`
	FetchSubBoards bool   `protobuf:"varint,3,opt,name=fetchSubBoards,proto3" json:"fetchSubBoards,omitempty"`
	Page           string `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
	Limit          string `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchBoardsRequest) Reset() {
	*x = SearchBoardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBoardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBoardsRequest) ProtoMessage() {}

func (x *SearchBoardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBoardsRequest.ProtoReflect.Descriptor instead.
func (*SearchBoardsRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{10}
}

func (x *SearchBoardsRequest) GetProfileID() int32 {
	if x != nil {
		return x.ProfileID
	}
	return 0
}

func (x *SearchBoardsRequest) GetBoardName() string {
	if x != nil {
		return x.BoardName
	}
	return ""
}

func (x *SearchBoardsRequest) GetFetchSubBoards() bool {
	if x != nil {
		return x.FetchSubBoards
	}
	return false
}

func (x *SearchBoardsRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *SearchBoardsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

type AddBoardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Board     *Board `protobuf:"bytes,1,opt,name=board,proto3" json:"board,omitempty"`
	ProfileID int32  `protobuf:"varint,2,opt,name=profileID,proto3" json:"profileID,omitempty"`
}

func (x *AddBoardRequest) Reset() {
	*x = AddBoardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBoardRequest) ProtoMessage() {}

func (x *AddBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBoardRequest.ProtoReflect.Descriptor instead.
func (*AddBoardRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{11}
}

func (x *AddBoardRequest) GetBoard() *Board {
	if x != nil {
		return x.Board
	}
	return nil
}

func (x *AddBoardRequest) GetProfileID() int32 {
	if x != nil {
		return x.ProfileID
	}
	return 0
}

type GenericResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *any1.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Status  int32     `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Message string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GenericResponse) Reset() {
	*x = GenericResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericResponse) ProtoMessage() {}

func (x *GenericResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericResponse.ProtoReflect.Descriptor instead.
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{12}
}

func (x *GenericResponse) GetData() *any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GenericResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GenericResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetBoardMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardId string `protobuf:"bytes,1,opt,name=boardId,proto3" json:"boardId,omitempty"`
	Limit   string `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page    string `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	Role    string `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GetBoardMembersRequest) Reset() {
	*x = GetBoardMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoardMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardMembersRequest) ProtoMessage() {}

func (x *GetBoardMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardMembersRequest.ProtoReflect.Descriptor instead.
func (*GetBoardMembersRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{13}
}

func (x *GetBoardMembersRequest) GetBoardId() string {
	if x != nil {
		return x.BoardId
	}
	return ""
}

func (x *GetBoardMembersRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetBoardMembersRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *GetBoardMembersRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetBoardMembersRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type GetBoardMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileIDs []int32 `protobuf:"varint,1,rep,packed,name=profileIDs,proto3" json:"profileIDs,omitempty"`
	Status     int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Message    string  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetBoardMembersResponse) Reset() {
	*x = GetBoardMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoardMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardMembersResponse) ProtoMessage() {}

func (x *GetBoardMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardMembersResponse.ProtoReflect.Descriptor instead.
func (*GetBoardMembersResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{14}
}

func (x *GetBoardMembersResponse) GetProfileIDs() []int32 {
	if x != nil {
		return x.ProfileIDs
	}
	return nil
}

func (x *GetBoardMembersResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetBoardMembersResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ProfileIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileID int32 `protobuf:"varint,1,opt,name=profileID,proto3" json:"profileID,omitempty"`
}

func (x *ProfileIDRequest) Reset() {
	*x = ProfileIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileIDRequest) ProtoMessage() {}

func (x *ProfileIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileIDRequest.ProtoReflect.Descriptor instead.
func (*ProfileIDRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{15}
}

func (x *ProfileIDRequest) GetProfileID() int32 {
	if x != nil {
		return x.ProfileID
	}
	return 0
}

type BoardSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BoardSettingsRequest) Reset() {
	*x = BoardSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardSettingsRequest) ProtoMessage() {}

func (x *BoardSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardSettingsRequest.ProtoReflect.Descriptor instead.
func (*BoardSettingsRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{16}
}

type BoardAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BoardAuthRequest) Reset() {
	*x = BoardAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardAuthRequest) ProtoMessage() {}

func (x *BoardAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardAuthRequest.ProtoReflect.Descriptor instead.
func (*BoardAuthRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{17}
}

type GetBoardFollowersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBoardFollowersRequest) Reset() {
	*x = GetBoardFollowersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoardFollowersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardFollowersRequest) ProtoMessage() {}

func (x *GetBoardFollowersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardFollowersRequest.ProtoReflect.Descriptor instead.
func (*GetBoardFollowersRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{18}
}

type GetBoardThingOwnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBoardThingOwnersRequest) Reset() {
	*x = GetBoardThingOwnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoardThingOwnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardThingOwnersRequest) ProtoMessage() {}

func (x *GetBoardThingOwnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardThingOwnersRequest.ProtoReflect.Descriptor instead.
func (*GetBoardThingOwnersRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{19}
}

type FetchBoardThingExtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchBoardThingExtRequest) Reset() {
	*x = FetchBoardThingExtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBoardThingExtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBoardThingExtRequest) ProtoMessage() {}

func (x *FetchBoardThingExtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBoardThingExtRequest.ProtoReflect.Descriptor instead.
func (*FetchBoardThingExtRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{20}
}

type FetchBoardInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchBoardInfoRequest) Reset() {
	*x = FetchBoardInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBoardInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBoardInfoRequest) ProtoMessage() {}

func (x *FetchBoardInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBoardInfoRequest.ProtoReflect.Descriptor instead.
func (*FetchBoardInfoRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{21}
}

type UpdateBoardThingsTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileID int32    `protobuf:"varint,1,opt,name=profileID,proto3" json:"profileID,omitempty"`
	BoardID   string   `protobuf:"bytes,2,opt,name=boardID,proto3" json:"boardID,omitempty"`
	ThingID   string   `protobuf:"bytes,3,opt,name=thingID,proto3" json:"thingID,omitempty"`
	Tags      []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *UpdateBoardThingsTagsRequest) Reset() {
	*x = UpdateBoardThingsTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBoardThingsTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBoardThingsTagsRequest) ProtoMessage() {}

func (x *UpdateBoardThingsTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBoardThingsTagsRequest.ProtoReflect.Descriptor instead.
func (*UpdateBoardThingsTagsRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateBoardThingsTagsRequest) GetProfileID() int32 {
	if x != nil {
		return x.ProfileID
	}
	return 0
}

func (x *UpdateBoardThingsTagsRequest) GetBoardID() string {
	if x != nil {
		return x.BoardID
	}
	return ""
}

func (x *UpdateBoardThingsTagsRequest) GetThingID() string {
	if x != nil {
		return x.ThingID
	}
	return ""
}

func (x *UpdateBoardThingsTagsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GetBoardThingsTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardID string `protobuf:"bytes,1,opt,name=boardID,proto3" json:"boardID,omitempty"`
}

func (x *GetBoardThingsTagsRequest) Reset() {
	*x = GetBoardThingsTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoardThingsTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardThingsTagsRequest) ProtoMessage() {}

func (x *GetBoardThingsTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardThingsTagsRequest.ProtoReflect.Descriptor instead.
func (*GetBoardThingsTagsRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{23}
}

func (x *GetBoardThingsTagsRequest) GetBoardID() string {
	if x != nil {
		return x.BoardID
	}
	return ""
}

type FetchBoardByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardID string `protobuf:"bytes,1,opt,name=boardID,proto3" json:"boardID,omitempty"`
	Role    string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *FetchBoardByIDRequest) Reset() {
	*x = FetchBoardByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBoardByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBoardByIDRequest) ProtoMessage() {}

func (x *FetchBoardByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBoardByIDRequest.ProtoReflect.Descriptor instead.
func (*FetchBoardByIDRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{24}
}

func (x *FetchBoardByIDRequest) GetBoardID() string {
	if x != nil {
		return x.BoardID
	}
	return ""
}

func (x *FetchBoardByIDRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type FetchBoardDetailsByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardID string `protobuf:"bytes,1,opt,name=boardID,proto3" json:"boardID,omitempty"`
}

func (x *FetchBoardDetailsByIDRequest) Reset() {
	*x = FetchBoardDetailsByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBoardDetailsByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBoardDetailsByIDRequest) ProtoMessage() {}

func (x *FetchBoardDetailsByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBoardDetailsByIDRequest.ProtoReflect.Descriptor instead.
func (*FetchBoardDetailsByIDRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{25}
}

func (x *FetchBoardDetailsByIDRequest) GetBoardID() string {
	if x != nil {
		return x.BoardID
	}
	return ""
}

type UpdateBoardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   map[string]*any1.Any `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoardID   string               `protobuf:"bytes,2,opt,name=boardID,proto3" json:"boardID,omitempty"`
	ProfileID int32                `protobuf:"varint,3,opt,name=profileID,proto3" json:"profileID,omitempty"` // Define your request fields here
}

func (x *UpdateBoardRequest) Reset() {
	*x = UpdateBoardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBoardRequest) ProtoMessage() {}

func (x *UpdateBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBoardRequest.ProtoReflect.Descriptor instead.
func (*UpdateBoardRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateBoardRequest) GetPayload() map[string]*any1.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *UpdateBoardRequest) GetBoardID() string {
	if x != nil {
		return x.BoardID
	}
	return ""
}

func (x *UpdateBoardRequest) GetProfileID() int32 {
	if x != nil {
		return x.ProfileID
	}
	return 0
}

type DeleteBoardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBoardRequest) Reset() {
	*x = DeleteBoardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBoardRequest) ProtoMessage() {}

func (x *DeleteBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBoardRequest.ProtoReflect.Descriptor instead.
func (*DeleteBoardRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{27}
}

type GetBoardPermissionByProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boards    []*Board `protobuf:"bytes,1,rep,name=boards,proto3" json:"boards,omitempty"`
	ProfileID int32    `protobuf:"varint,2,opt,name=profileID,proto3" json:"profileID,omitempty"`
}

func (x *GetBoardPermissionByProfileRequest) Reset() {
	*x = GetBoardPermissionByProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoardPermissionByProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardPermissionByProfileRequest) ProtoMessage() {}

func (x *GetBoardPermissionByProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardPermissionByProfileRequest.ProtoReflect.Descriptor instead.
func (*GetBoardPermissionByProfileRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{28}
}

func (x *GetBoardPermissionByProfileRequest) GetBoards() []*Board {
	if x != nil {
		return x.Boards
	}
	return nil
}

func (x *GetBoardPermissionByProfileRequest) GetProfileID() int32 {
	if x != nil {
		return x.ProfileID
	}
	return 0
}

type GetBoardPermissionByProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBoardPermissionByProfileResponse) Reset() {
	*x = GetBoardPermissionByProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBoardPermissionByProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBoardPermissionByProfileResponse) ProtoMessage() {}

func (x *GetBoardPermissionByProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBoardPermissionByProfileResponse.ProtoReflect.Descriptor instead.
func (*GetBoardPermissionByProfileResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{29}
}

type GetProfileTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GetProfileTagsResponse) Reset() {
	*x = GetProfileTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_board_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileTagsResponse) ProtoMessage() {}

func (x *GetProfileTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_board_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileTagsResponse.ProtoReflect.Descriptor instead.
func (*GetProfileTagsResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_board_proto_rawDescGZIP(), []int{30}
}

func (x *GetProfileTagsResponse) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_protobuf_board_proto protoreflect.FileDescriptor

var file_protobuf_board_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45,
	0x0a, 0x15, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x63, 0x69, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x06, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x90, 0x02,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xa3, 0x10, 0x0a, 0x05, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x69, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x50,
	0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x69, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0c, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x50,
	0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c,
	0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x61, 0x67, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x20,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x69, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x69, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0c, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x69, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x73,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65,
	0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0d,
	0x69, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x69, 0x73, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x73,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x22, 0x4a, 0x0a, 0x16, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0x65, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x7c, 0x0a, 0x0c, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x84, 0x01,
	0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x75, 0x62, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x75, 0x62, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x58, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x44, 0x22, 0x6d, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x6b,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x16, 0x0a,
	0x14, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x17, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0x35, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x38,
	0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x22, 0xe5, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x1a, 0x50,
	0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x06, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x32, 0xe9, 0x0c, 0x0a, 0x0c, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x54, 0x68, 0x69, 0x6e, 0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x68,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x68,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x68, 0x69, 0x6e, 0x67,
	0x73, 0x54, 0x61, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x68,
	0x69, 0x6e, 0x67, 0x73, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x2e, 0x2e, 0x2f, 0x73, 0x69, 0x64,
	0x65, 0x6b, 0x69, 0x71, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x6b,
	0x69, 0x71, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_board_proto_rawDescOnce sync.Once
	file_protobuf_board_proto_rawDescData = file_protobuf_board_proto_rawDesc
)

func file_protobuf_board_proto_rawDescGZIP() []byte {
	file_protobuf_board_proto_rawDescOnce.Do(func() {
		file_protobuf_board_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_board_proto_rawDescData)
	})
	return file_protobuf_board_proto_rawDescData
}

var file_protobuf_board_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_protobuf_board_proto_goTypes = []interface{}{
	(*HandleBoardInvitation)(nil),               // 0: content.v1.HandleBoardInvitation
	(*ConciseProfile)(nil),                      // 1: content.v1.ConciseProfile
	(*Thumbnails)(nil),                          // 2: content.v1.Thumbnails
	(*Comment)(nil),                             // 3: content.v1.Comment
	(*Board)(nil),                               // 4: content.v1.Board
	(*BoardMemberRoleRequest)(nil),              // 5: content.v1.BoardMemberRoleRequest
	(*ChangeProfileRole)(nil),                   // 6: content.v1.ChangeProfileRole
	(*BoardMapping)(nil),                        // 7: content.v1.BoardMapping
	(*BoardFollowInfo)(nil),                     // 8: content.v1.BoardFollowInfo
	(*FetchBoardsRequest)(nil),                  // 9: content.v1.FetchBoardsRequest
	(*SearchBoardsRequest)(nil),                 // 10: content.v1.SearchBoardsRequest
	(*AddBoardRequest)(nil),                     // 11: content.v1.AddBoardRequest
	(*GenericResponse)(nil),                     // 12: content.v1.GenericResponse
	(*GetBoardMembersRequest)(nil),              // 13: content.v1.GetBoardMembersRequest
	(*GetBoardMembersResponse)(nil),             // 14: content.v1.GetBoardMembersResponse
	(*ProfileIDRequest)(nil),                    // 15: content.v1.ProfileIDRequest
	(*BoardSettingsRequest)(nil),                // 16: content.v1.BoardSettingsRequest
	(*BoardAuthRequest)(nil),                    // 17: content.v1.BoardAuthRequest
	(*GetBoardFollowersRequest)(nil),            // 18: content.v1.GetBoardFollowersRequest
	(*GetBoardThingOwnersRequest)(nil),          // 19: content.v1.GetBoardThingOwnersRequest
	(*FetchBoardThingExtRequest)(nil),           // 20: content.v1.FetchBoardThingExtRequest
	(*FetchBoardInfoRequest)(nil),               // 21: content.v1.FetchBoardInfoRequest
	(*UpdateBoardThingsTagsRequest)(nil),        // 22: content.v1.UpdateBoardThingsTagsRequest
	(*GetBoardThingsTagsRequest)(nil),           // 23: content.v1.GetBoardThingsTagsRequest
	(*FetchBoardByIDRequest)(nil),               // 24: content.v1.FetchBoardByIDRequest
	(*FetchBoardDetailsByIDRequest)(nil),        // 25: content.v1.FetchBoardDetailsByIDRequest
	(*UpdateBoardRequest)(nil),                  // 26: content.v1.UpdateBoardRequest
	(*DeleteBoardRequest)(nil),                  // 27: content.v1.DeleteBoardRequest
	(*GetBoardPermissionByProfileRequest)(nil),  // 28: content.v1.GetBoardPermissionByProfileRequest
	(*GetBoardPermissionByProfileResponse)(nil), // 29: content.v1.GetBoardPermissionByProfileResponse
	(*GetProfileTagsResponse)(nil),              // 30: content.v1.GetProfileTagsResponse
	nil,                                         // 31: content.v1.UpdateBoardRequest.PayloadEntry
	(*timestamp.Timestamp)(nil),                 // 32: google.protobuf.Timestamp
	(*any1.Any)(nil),                            // 33: google.protobuf.Any
}
var file_protobuf_board_proto_depIdxs = []int32{
	2,  // 0: content.v1.ConciseProfile.thumbs:type_name -> content.v1.Thumbnails
	32, // 1: content.v1.Comment.createDate:type_name -> google.protobuf.Timestamp
	32, // 2: content.v1.Comment.lastModifiedDate:type_name -> google.protobuf.Timestamp
	1,  // 3: content.v1.Board.ownerInfo:type_name -> content.v1.ConciseProfile
	1,  // 4: content.v1.Board.taggedPeople:type_name -> content.v1.ConciseProfile
	3,  // 5: content.v1.Board.comments:type_name -> content.v1.Comment
	32, // 6: content.v1.Board.createDate:type_name -> google.protobuf.Timestamp
	32, // 7: content.v1.Board.modifiedDate:type_name -> google.protobuf.Timestamp
	32, // 8: content.v1.Board.deleteDate:type_name -> google.protobuf.Timestamp
	32, // 9: content.v1.Board.expiryDate:type_name -> google.protobuf.Timestamp
	1,  // 10: content.v1.Board.boardFollowers:type_name -> content.v1.ConciseProfile
	1,  // 11: content.v1.Board.boardMembers:type_name -> content.v1.ConciseProfile
	2,  // 12: content.v1.Board.thumbs:type_name -> content.v1.Thumbnails
	32, // 13: content.v1.BoardMapping.boardId:type_name -> google.protobuf.Timestamp
	32, // 14: content.v1.BoardMapping.parentId:type_name -> google.protobuf.Timestamp
	4,  // 15: content.v1.AddBoardRequest.board:type_name -> content.v1.Board
	33, // 16: content.v1.GenericResponse.data:type_name -> google.protobuf.Any
	31, // 17: content.v1.UpdateBoardRequest.payload:type_name -> content.v1.UpdateBoardRequest.PayloadEntry
	4,  // 18: content.v1.GetBoardPermissionByProfileRequest.boards:type_name -> content.v1.Board
	33, // 19: content.v1.UpdateBoardRequest.PayloadEntry.value:type_name -> google.protobuf.Any
	11, // 20: content.v1.BoardService.AddBoard:input_type -> content.v1.AddBoardRequest
	9,  // 21: content.v1.BoardService.FetchBoards:input_type -> content.v1.FetchBoardsRequest
	26, // 22: content.v1.BoardService.UpdateBoard:input_type -> content.v1.UpdateBoardRequest
	10, // 23: content.v1.BoardService.SearchBoards:input_type -> content.v1.SearchBoardsRequest
	24, // 24: content.v1.BoardService.FetchBoardByID:input_type -> content.v1.FetchBoardByIDRequest
	25, // 25: content.v1.BoardService.FetchBoardDetailsByID:input_type -> content.v1.FetchBoardDetailsByIDRequest
	27, // 26: content.v1.BoardService.DeleteBoard:input_type -> content.v1.DeleteBoardRequest
	15, // 27: content.v1.BoardService.ListBoardInvites:input_type -> content.v1.ProfileIDRequest
	16, // 28: content.v1.BoardService.BoardSettings:input_type -> content.v1.BoardSettingsRequest
	17, // 29: content.v1.BoardService.BoardAuth:input_type -> content.v1.BoardAuthRequest
	18, // 30: content.v1.BoardService.GetBoardFollowers:input_type -> content.v1.GetBoardFollowersRequest
	19, // 31: content.v1.BoardService.GetBoardThingOwners:input_type -> content.v1.GetBoardThingOwnersRequest
	20, // 32: content.v1.BoardService.FetchBoardThingExt:input_type -> content.v1.FetchBoardThingExtRequest
	21, // 33: content.v1.BoardService.FetchBoardInfo:input_type -> content.v1.FetchBoardInfoRequest
	22, // 34: content.v1.BoardService.UpdateBoardThingsTags:input_type -> content.v1.UpdateBoardThingsTagsRequest
	23, // 35: content.v1.BoardService.GetBoardThingsTags:input_type -> content.v1.GetBoardThingsTagsRequest
	28, // 36: content.v1.BoardService.GetBoardPermissionByProfile:input_type -> content.v1.GetBoardPermissionByProfileRequest
	15, // 37: content.v1.BoardService.GetProfileTags:input_type -> content.v1.ProfileIDRequest
	13, // 38: content.v1.BoardService.GetBoardMembers:input_type -> content.v1.GetBoardMembersRequest
	12, // 39: content.v1.BoardService.AddBoard:output_type -> content.v1.GenericResponse
	12, // 40: content.v1.BoardService.FetchBoards:output_type -> content.v1.GenericResponse
	12, // 41: content.v1.BoardService.UpdateBoard:output_type -> content.v1.GenericResponse
	12, // 42: content.v1.BoardService.SearchBoards:output_type -> content.v1.GenericResponse
	12, // 43: content.v1.BoardService.FetchBoardByID:output_type -> content.v1.GenericResponse
	12, // 44: content.v1.BoardService.FetchBoardDetailsByID:output_type -> content.v1.GenericResponse
	12, // 45: content.v1.BoardService.DeleteBoard:output_type -> content.v1.GenericResponse
	12, // 46: content.v1.BoardService.ListBoardInvites:output_type -> content.v1.GenericResponse
	12, // 47: content.v1.BoardService.BoardSettings:output_type -> content.v1.GenericResponse
	12, // 48: content.v1.BoardService.BoardAuth:output_type -> content.v1.GenericResponse
	12, // 49: content.v1.BoardService.GetBoardFollowers:output_type -> content.v1.GenericResponse
	12, // 50: content.v1.BoardService.GetBoardThingOwners:output_type -> content.v1.GenericResponse
	12, // 51: content.v1.BoardService.FetchBoardThingExt:output_type -> content.v1.GenericResponse
	12, // 52: content.v1.BoardService.FetchBoardInfo:output_type -> content.v1.GenericResponse
	12, // 53: content.v1.BoardService.UpdateBoardThingsTags:output_type -> content.v1.GenericResponse
	12, // 54: content.v1.BoardService.GetBoardThingsTags:output_type -> content.v1.GenericResponse
	29, // 55: content.v1.BoardService.GetBoardPermissionByProfile:output_type -> content.v1.GetBoardPermissionByProfileResponse
	30, // 56: content.v1.BoardService.GetProfileTags:output_type -> content.v1.GetProfileTagsResponse
	14, // 57: content.v1.BoardService.GetBoardMembers:output_type -> content.v1.GetBoardMembersResponse
	39, // [39:58] is the sub-list for method output_type
	20, // [20:39] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_protobuf_board_proto_init() }
func file_protobuf_board_proto_init() {
	if File_protobuf_board_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_board_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleBoardInvitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConciseProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thumbnails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Board); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardMemberRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeProfileRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardFollowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBoardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBoardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBoardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoardMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoardMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoardFollowersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoardThingOwnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBoardThingExtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBoardInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBoardThingsTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoardThingsTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBoardByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBoardDetailsByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBoardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBoardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoardPermissionByProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBoardPermissionByProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_board_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_board_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_board_proto_goTypes,
		DependencyIndexes: file_protobuf_board_proto_depIdxs,
		MessageInfos:      file_protobuf_board_proto_msgTypes,
	}.Build()
	File_protobuf_board_proto = out.File
	file_protobuf_board_proto_rawDesc = nil
	file_protobuf_board_proto_goTypes = nil
	file_protobuf_board_proto_depIdxs = nil
}
