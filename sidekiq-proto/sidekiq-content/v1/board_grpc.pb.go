// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protobuf/board.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoardServiceClient is the client API for BoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardServiceClient interface {
	AddBoard(ctx context.Context, in *AddBoardRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	FetchBoards(ctx context.Context, in *FetchBoardsRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	UpdateBoard(ctx context.Context, in *UpdateBoardRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	SearchBoards(ctx context.Context, in *SearchBoardsRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	FetchBoardByID(ctx context.Context, in *FetchBoardByIDRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	FetchBoardDetailsByID(ctx context.Context, in *FetchBoardDetailsByIDRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	DeleteBoard(ctx context.Context, in *DeleteBoardRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	ListBoardInvites(ctx context.Context, in *ProfileIDRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	BoardSettings(ctx context.Context, in *BoardSettingsRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	BoardAuth(ctx context.Context, in *BoardAuthRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetBoardFollowers(ctx context.Context, in *GetBoardFollowersRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetBoardThingOwners(ctx context.Context, in *GetBoardThingOwnersRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	FetchBoardThingExt(ctx context.Context, in *FetchBoardThingExtRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	FetchBoardInfo(ctx context.Context, in *FetchBoardInfoRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	UpdateBoardThingsTags(ctx context.Context, in *UpdateBoardThingsTagsRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetBoardThingsTags(ctx context.Context, in *GetBoardThingsTagsRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetBoardPermissionByProfile(ctx context.Context, in *GetBoardPermissionByProfileRequest, opts ...grpc.CallOption) (*GetBoardPermissionByProfileResponse, error)
	GetProfileTags(ctx context.Context, in *ProfileIDRequest, opts ...grpc.CallOption) (*GetProfileTagsResponse, error)
	GetBoardMembers(ctx context.Context, in *GetBoardMembersRequest, opts ...grpc.CallOption) (*GetBoardMembersResponse, error)
}

type boardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardServiceClient(cc grpc.ClientConnInterface) BoardServiceClient {
	return &boardServiceClient{cc}
}

func (c *boardServiceClient) AddBoard(ctx context.Context, in *AddBoardRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/AddBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) FetchBoards(ctx context.Context, in *FetchBoardsRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/FetchBoards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) UpdateBoard(ctx context.Context, in *UpdateBoardRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/UpdateBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) SearchBoards(ctx context.Context, in *SearchBoardsRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/SearchBoards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) FetchBoardByID(ctx context.Context, in *FetchBoardByIDRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/FetchBoardByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) FetchBoardDetailsByID(ctx context.Context, in *FetchBoardDetailsByIDRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/FetchBoardDetailsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DeleteBoard(ctx context.Context, in *DeleteBoardRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/DeleteBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) ListBoardInvites(ctx context.Context, in *ProfileIDRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/ListBoardInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) BoardSettings(ctx context.Context, in *BoardSettingsRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/BoardSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) BoardAuth(ctx context.Context, in *BoardAuthRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/BoardAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetBoardFollowers(ctx context.Context, in *GetBoardFollowersRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/GetBoardFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetBoardThingOwners(ctx context.Context, in *GetBoardThingOwnersRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/GetBoardThingOwners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) FetchBoardThingExt(ctx context.Context, in *FetchBoardThingExtRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/FetchBoardThingExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) FetchBoardInfo(ctx context.Context, in *FetchBoardInfoRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/FetchBoardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) UpdateBoardThingsTags(ctx context.Context, in *UpdateBoardThingsTagsRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/UpdateBoardThingsTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetBoardThingsTags(ctx context.Context, in *GetBoardThingsTagsRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/GetBoardThingsTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetBoardPermissionByProfile(ctx context.Context, in *GetBoardPermissionByProfileRequest, opts ...grpc.CallOption) (*GetBoardPermissionByProfileResponse, error) {
	out := new(GetBoardPermissionByProfileResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/GetBoardPermissionByProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetProfileTags(ctx context.Context, in *ProfileIDRequest, opts ...grpc.CallOption) (*GetProfileTagsResponse, error) {
	out := new(GetProfileTagsResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/GetProfileTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetBoardMembers(ctx context.Context, in *GetBoardMembersRequest, opts ...grpc.CallOption) (*GetBoardMembersResponse, error) {
	out := new(GetBoardMembersResponse)
	err := c.cc.Invoke(ctx, "/content.v1.BoardService/GetBoardMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardServiceServer is the server API for BoardService service.
// All implementations must embed UnimplementedBoardServiceServer
// for forward compatibility
type BoardServiceServer interface {
	AddBoard(context.Context, *AddBoardRequest) (*GenericResponse, error)
	FetchBoards(context.Context, *FetchBoardsRequest) (*GenericResponse, error)
	UpdateBoard(context.Context, *UpdateBoardRequest) (*GenericResponse, error)
	SearchBoards(context.Context, *SearchBoardsRequest) (*GenericResponse, error)
	FetchBoardByID(context.Context, *FetchBoardByIDRequest) (*GenericResponse, error)
	FetchBoardDetailsByID(context.Context, *FetchBoardDetailsByIDRequest) (*GenericResponse, error)
	DeleteBoard(context.Context, *DeleteBoardRequest) (*GenericResponse, error)
	ListBoardInvites(context.Context, *ProfileIDRequest) (*GenericResponse, error)
	BoardSettings(context.Context, *BoardSettingsRequest) (*GenericResponse, error)
	BoardAuth(context.Context, *BoardAuthRequest) (*GenericResponse, error)
	GetBoardFollowers(context.Context, *GetBoardFollowersRequest) (*GenericResponse, error)
	GetBoardThingOwners(context.Context, *GetBoardThingOwnersRequest) (*GenericResponse, error)
	FetchBoardThingExt(context.Context, *FetchBoardThingExtRequest) (*GenericResponse, error)
	FetchBoardInfo(context.Context, *FetchBoardInfoRequest) (*GenericResponse, error)
	UpdateBoardThingsTags(context.Context, *UpdateBoardThingsTagsRequest) (*GenericResponse, error)
	GetBoardThingsTags(context.Context, *GetBoardThingsTagsRequest) (*GenericResponse, error)
	GetBoardPermissionByProfile(context.Context, *GetBoardPermissionByProfileRequest) (*GetBoardPermissionByProfileResponse, error)
	GetProfileTags(context.Context, *ProfileIDRequest) (*GetProfileTagsResponse, error)
	GetBoardMembers(context.Context, *GetBoardMembersRequest) (*GetBoardMembersResponse, error)
	mustEmbedUnimplementedBoardServiceServer()
}

// UnimplementedBoardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoardServiceServer struct {
}

func (UnimplementedBoardServiceServer) AddBoard(context.Context, *AddBoardRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBoard not implemented")
}
func (UnimplementedBoardServiceServer) FetchBoards(context.Context, *FetchBoardsRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBoards not implemented")
}
func (UnimplementedBoardServiceServer) UpdateBoard(context.Context, *UpdateBoardRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoard not implemented")
}
func (UnimplementedBoardServiceServer) SearchBoards(context.Context, *SearchBoardsRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBoards not implemented")
}
func (UnimplementedBoardServiceServer) FetchBoardByID(context.Context, *FetchBoardByIDRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBoardByID not implemented")
}
func (UnimplementedBoardServiceServer) FetchBoardDetailsByID(context.Context, *FetchBoardDetailsByIDRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBoardDetailsByID not implemented")
}
func (UnimplementedBoardServiceServer) DeleteBoard(context.Context, *DeleteBoardRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoard not implemented")
}
func (UnimplementedBoardServiceServer) ListBoardInvites(context.Context, *ProfileIDRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBoardInvites not implemented")
}
func (UnimplementedBoardServiceServer) BoardSettings(context.Context, *BoardSettingsRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoardSettings not implemented")
}
func (UnimplementedBoardServiceServer) BoardAuth(context.Context, *BoardAuthRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoardAuth not implemented")
}
func (UnimplementedBoardServiceServer) GetBoardFollowers(context.Context, *GetBoardFollowersRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardFollowers not implemented")
}
func (UnimplementedBoardServiceServer) GetBoardThingOwners(context.Context, *GetBoardThingOwnersRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardThingOwners not implemented")
}
func (UnimplementedBoardServiceServer) FetchBoardThingExt(context.Context, *FetchBoardThingExtRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBoardThingExt not implemented")
}
func (UnimplementedBoardServiceServer) FetchBoardInfo(context.Context, *FetchBoardInfoRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBoardInfo not implemented")
}
func (UnimplementedBoardServiceServer) UpdateBoardThingsTags(context.Context, *UpdateBoardThingsTagsRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoardThingsTags not implemented")
}
func (UnimplementedBoardServiceServer) GetBoardThingsTags(context.Context, *GetBoardThingsTagsRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardThingsTags not implemented")
}
func (UnimplementedBoardServiceServer) GetBoardPermissionByProfile(context.Context, *GetBoardPermissionByProfileRequest) (*GetBoardPermissionByProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardPermissionByProfile not implemented")
}
func (UnimplementedBoardServiceServer) GetProfileTags(context.Context, *ProfileIDRequest) (*GetProfileTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileTags not implemented")
}
func (UnimplementedBoardServiceServer) GetBoardMembers(context.Context, *GetBoardMembersRequest) (*GetBoardMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardMembers not implemented")
}
func (UnimplementedBoardServiceServer) mustEmbedUnimplementedBoardServiceServer() {}

// UnsafeBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardServiceServer will
// result in compilation errors.
type UnsafeBoardServiceServer interface {
	mustEmbedUnimplementedBoardServiceServer()
}

func RegisterBoardServiceServer(s grpc.ServiceRegistrar, srv BoardServiceServer) {
	s.RegisterService(&BoardService_ServiceDesc, srv)
}

func _BoardService_AddBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).AddBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/AddBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).AddBoard(ctx, req.(*AddBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_FetchBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchBoardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).FetchBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/FetchBoards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).FetchBoards(ctx, req.(*FetchBoardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_UpdateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).UpdateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/UpdateBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).UpdateBoard(ctx, req.(*UpdateBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_SearchBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBoardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).SearchBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/SearchBoards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).SearchBoards(ctx, req.(*SearchBoardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_FetchBoardByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchBoardByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).FetchBoardByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/FetchBoardByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).FetchBoardByID(ctx, req.(*FetchBoardByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_FetchBoardDetailsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchBoardDetailsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).FetchBoardDetailsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/FetchBoardDetailsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).FetchBoardDetailsByID(ctx, req.(*FetchBoardDetailsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DeleteBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DeleteBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/DeleteBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DeleteBoard(ctx, req.(*DeleteBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_ListBoardInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).ListBoardInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/ListBoardInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).ListBoardInvites(ctx, req.(*ProfileIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_BoardSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).BoardSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/BoardSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).BoardSettings(ctx, req.(*BoardSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_BoardAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).BoardAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/BoardAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).BoardAuth(ctx, req.(*BoardAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetBoardFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetBoardFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/GetBoardFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetBoardFollowers(ctx, req.(*GetBoardFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetBoardThingOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardThingOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetBoardThingOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/GetBoardThingOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetBoardThingOwners(ctx, req.(*GetBoardThingOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_FetchBoardThingExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchBoardThingExtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).FetchBoardThingExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/FetchBoardThingExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).FetchBoardThingExt(ctx, req.(*FetchBoardThingExtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_FetchBoardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchBoardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).FetchBoardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/FetchBoardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).FetchBoardInfo(ctx, req.(*FetchBoardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_UpdateBoardThingsTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBoardThingsTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).UpdateBoardThingsTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/UpdateBoardThingsTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).UpdateBoardThingsTags(ctx, req.(*UpdateBoardThingsTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetBoardThingsTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardThingsTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetBoardThingsTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/GetBoardThingsTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetBoardThingsTags(ctx, req.(*GetBoardThingsTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetBoardPermissionByProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardPermissionByProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetBoardPermissionByProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/GetBoardPermissionByProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetBoardPermissionByProfile(ctx, req.(*GetBoardPermissionByProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetProfileTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetProfileTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/GetProfileTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetProfileTags(ctx, req.(*ProfileIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetBoardMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetBoardMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.v1.BoardService/GetBoardMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetBoardMembers(ctx, req.(*GetBoardMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoardService_ServiceDesc is the grpc.ServiceDesc for BoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.v1.BoardService",
	HandlerType: (*BoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBoard",
			Handler:    _BoardService_AddBoard_Handler,
		},
		{
			MethodName: "FetchBoards",
			Handler:    _BoardService_FetchBoards_Handler,
		},
		{
			MethodName: "UpdateBoard",
			Handler:    _BoardService_UpdateBoard_Handler,
		},
		{
			MethodName: "SearchBoards",
			Handler:    _BoardService_SearchBoards_Handler,
		},
		{
			MethodName: "FetchBoardByID",
			Handler:    _BoardService_FetchBoardByID_Handler,
		},
		{
			MethodName: "FetchBoardDetailsByID",
			Handler:    _BoardService_FetchBoardDetailsByID_Handler,
		},
		{
			MethodName: "DeleteBoard",
			Handler:    _BoardService_DeleteBoard_Handler,
		},
		{
			MethodName: "ListBoardInvites",
			Handler:    _BoardService_ListBoardInvites_Handler,
		},
		{
			MethodName: "BoardSettings",
			Handler:    _BoardService_BoardSettings_Handler,
		},
		{
			MethodName: "BoardAuth",
			Handler:    _BoardService_BoardAuth_Handler,
		},
		{
			MethodName: "GetBoardFollowers",
			Handler:    _BoardService_GetBoardFollowers_Handler,
		},
		{
			MethodName: "GetBoardThingOwners",
			Handler:    _BoardService_GetBoardThingOwners_Handler,
		},
		{
			MethodName: "FetchBoardThingExt",
			Handler:    _BoardService_FetchBoardThingExt_Handler,
		},
		{
			MethodName: "FetchBoardInfo",
			Handler:    _BoardService_FetchBoardInfo_Handler,
		},
		{
			MethodName: "UpdateBoardThingsTags",
			Handler:    _BoardService_UpdateBoardThingsTags_Handler,
		},
		{
			MethodName: "GetBoardThingsTags",
			Handler:    _BoardService_GetBoardThingsTags_Handler,
		},
		{
			MethodName: "GetBoardPermissionByProfile",
			Handler:    _BoardService_GetBoardPermissionByProfile_Handler,
		},
		{
			MethodName: "GetProfileTags",
			Handler:    _BoardService_GetProfileTags_Handler,
		},
		{
			MethodName: "GetBoardMembers",
			Handler:    _BoardService_GetBoardMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/board.proto",
}
